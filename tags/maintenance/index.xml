<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>maintenance on Rajat Bajpai</title>
    <link>https://rajatbajpai.com/tags/maintenance/</link>
    <description>Recent content in maintenance on Rajat Bajpai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 04 Nov 2021 20:42:55 +0530</lastBuildDate><atom:link href="https://rajatbajpai.com/tags/maintenance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What is an ideal ratio between maintenance and enhancement tasks?</title>
      <link>https://rajatbajpai.com/post/maintenance_vs_enhancement/</link>
      <pubDate>Thu, 04 Nov 2021 20:42:55 +0530</pubDate>
      
      <guid>https://rajatbajpai.com/post/maintenance_vs_enhancement/</guid>
      
      <description>&lt;p&gt;&lt;img src=&#34;https://rajatbajpai.com/img/maintenance_vs_enhancement_banner.png&#34; alt=&#34;maintenance versus enhancement banner image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lately, I have been pondering about the right balance between maintenance tasks and enhancements. Why have I been thinking about this topic? Well, to understand that, you first need to hear the backstory.&lt;/p&gt;
&lt;p&gt;Recently, one of my friends changed organization, and his reason for the change was that he wasn’t doing any new or thought-provoking work. Now, he is happy to find the work he longed for in another organization. While talking to him about the new team, he mentioned they mostly do enhancements, and there is less focus on maintenance. Personally, I find this situation to be a little concerning as well. The reason is you’ll inevitably accrue unnecessary stuff. I believe there should be a balance between maintenance tasks and enhancements as your project grows. However, there is no single ratio that’ll suffice for every project and team.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rajatbajpai.com/img/division_graph.png&#34; alt=&#34;Effort division graph&#34;&gt;
Coming back to our original question, is there a good ratio for every project? The answer is not straightforward, but I believe there it is. My enough rumination about this topic gave birth to three categories.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Young&lt;br&gt;
These projects have an age of fewer than ten years. And for these projects, the ratio should be around 30/70, means 30% of maintenance tasks and 70% of enhancements. The reason for this division is that young projects have to deal with less legacy baggage. There will be a less need for maintenance in your early years if you have proficient software engineers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mature&lt;br&gt;
These projects have an age of between ten to fifteen years. For these projects, the ratio should be around 50/50. The reason for this division is like the previous category. As you grow older, you need to contemplate the previous design decisions that might not hold under current circumstances or requirements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Old&lt;br&gt;
These projects have an age of over fifteen years. For these projects, the ratio should be around 60/40. This age accrues a lot of historical baggage, for example, programming language version.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On further thinking, I believe these ratios only based on the age of a project are not complete. In addition, I think the headcount of a team also affects these divisions because the rate of contribution is directly proportional to team size. The major philosophy here is that less code leaves less room for errors.&lt;/p&gt;
&lt;p&gt;Anyhow, based on the team size, we can have three categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Small&lt;br&gt;
These teams have a size of less than 50.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Medium&lt;br&gt;
These teams have a size between 50 to 150.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Large&lt;br&gt;
These teams have a size of over 150.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s take a hypothetical mature project with a large team to understand the above division’s little better. In this scenario, we can adjust our ratio to be 55/45 because a large team size will move these ratios more towards the maintenance chart. With these two criteria, we can calculate the division of work for any project and team.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please Note: There could be other criteria as well that might affect the work division. But, I haven’t been able to come up with those criteria yet. I will update the article if I think about something else.&lt;/em&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>What should we choose: maintainability or arcane performance tricks?</title>
      <link>https://rajatbajpai.com/post/perf_vs_maintenance/</link>
      <pubDate>Tue, 26 Oct 2021 21:45:26 +0530</pubDate>
      
      <guid>https://rajatbajpai.com/post/perf_vs_maintenance/</guid>
      
      <description>&lt;p&gt;&lt;img src=&#34;https://rajatbajpai.com/img/perf_vs_maintenance.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt;
&lt;p&gt;I have a question for you. What is more important in software development: maintainability or performance? I don&amp;rsquo;t know about you, but I would always lean towards maintainability. However, under some rare circumstances, performance is crucial as well, for example, a fast path of a server, database queries, simulator runtime, etc. I believe most software can get away with maintainability without writing arcane performant code. In these cases, where a minute gain can be instrumental, we can do some things to improve the performance of the applications.&lt;/p&gt;
&lt;p&gt;Today, I am going to discuss one such scenario in C language. You might say it is an arcane feature. Heck, even I didn&amp;rsquo;t know about it a few years back. That being said, I still believe 99% of system engineers using C language don&amp;rsquo;t need this. But it is always good to know stuff even if you don&amp;rsquo;t need it at the moment.&lt;/p&gt;
&lt;p&gt;Coming back to the topic of this article. What would you say if I told you that you are executing more assembly instructions than you need to while passing a pointer to a function? You might say I have gone cuckoo-bananas. But allow me to explain before being so judgemental. Let the empirical results guide us.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a small example to understand what I am saying. The below example takes two pointer arguments and changes their values, and finally returns their sum. Easy peasy, right? The assembly instructions generated for this piece of code with the -O3 compiler flag is shown next.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;change_and_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you examine the below assembly instructions, you see that we don&amp;rsquo;t necessarily need the third instruction. However, it has its purpose. Let&amp;rsquo;s take a scenario when both a and b points to the same value. In that case, if you don&amp;rsquo;t run the third instruction, which is re-reading the value of variable a, you will get an incorrect result (11 instead of 12). Because, b = 6 statement will change the previous value at the location. However, you can tell the compiler that these variables will never point to the same Lvalue, using &lt;strong&gt;restrict&lt;/strong&gt; keyword.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;nl&#34;&gt;change_and_add:&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;no&#34;&gt;DWORD&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;PTR&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;no&#34;&gt;DWORD&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;PTR&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;rsi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;DWORD&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;PTR&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;     &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s see the same example with the &lt;strong&gt;restrict&lt;/strong&gt; keyword. Look at the assembly instruction it is not re-reading the value of a because we have told the compiler that they&amp;rsquo;ll always point to different Lvalue. This information helped the compiler in dependency analysis.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;change_and_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;restrict&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;restrict&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;nl&#34;&gt;change_and_add:&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;no&#34;&gt;DWORD&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;PTR&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;no&#34;&gt;DWORD&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;PTR&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;rsi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difference between the two approaches increases with the increase in the number of arguments. However, this performance benefit comes with a caveat, though. Let&amp;rsquo;s suppose if we pass the same Lvalue in the second example. According to C specification, it is undefined behavior because compiler assumption fails.&lt;/p&gt;
&lt;p&gt;This circle backs to our original discussion, what should we choose: maintainability or performance. There is a slight chance that a new member of your team will know about this arcane keyword, and they might make a mistake, which will introduce hard-to-debug bugs. All in all, I would say choose the performance if you have benchmarked your code. And don&amp;rsquo;t forget to document the interface to minimize the damage.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please note: Generally, simple and maintainable code is performant as well. If you have not already watched Sean Parent&amp;rsquo;s talk (&lt;a href=&#34;https://youtu.be/qH6sSOr-yk8),&#34;&gt;https://youtu.be/qH6sSOr-yk8),&lt;/a&gt; then do yourself a favor and watch it right now.&lt;/em&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>

